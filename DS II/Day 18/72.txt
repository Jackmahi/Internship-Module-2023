class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        dp = [[0 for _ in range(len(word2)+1)] for _ in range(len(word1)+1)]
        
        # update the first column
        for i in range(len(word1)+1):
            dp[i][0] = i
        
        # update the first row
        for i in range(len(word2)+1):
            dp[0][i] = i
        
        
        # fill the remaining cells
        for i in range(1, len(word1)+1):
            for j in range(1, len(word2)+1):
                if word1[i-1] != word2[j-1]:
                    dp[i][j] = 1 + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])
                else:
                    dp[i][j] = dp[i-1][j-1]
        return dp[-1][-1]
def minDistance(self, word1: str, word2: str) -> int:
	m, n, lookup = len(word1), len(word2), {}
	def fun(i, j):
		if (i,j) in lookup:
			return lookup[(i,j)]
		if i < 0 or j < 0:
			return max(i,j) + 1
		if word1[i] == word2[j]:
			res = fun(i-1, j-1)
		else:
			res = 1 + min(fun(i-1,j), fun(i,j-1), fun(i-1,j-1))
		lookup[(i,j)] = res
		return lookup[(i,j)]
	return fun(m-1, n-1)