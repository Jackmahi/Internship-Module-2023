# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def bfs(self,node,subRoot):
        c=deque([node,subRoot])
        while c:
            t1=c.popleft()
            t2=c.popleft()
            if t1 and t2:
                if t1.val!=t2.val:
                    return False
                c.extend([t1.left,t2.left])
                c.extend([t1.right,t2.right])
            elif t1 or t2:
                return False
        return True
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        if root is None or subRoot is None:
            return False
        from collections import deque
        a=deque([root])
        while a:
            node=a.popleft()
            if node.val==subRoot.val:
                if self.bfs(node,subRoot):
                    return True
            if node.left:
                a.append(node.left)
            if node.right:
                a.append(node.right)
        return False