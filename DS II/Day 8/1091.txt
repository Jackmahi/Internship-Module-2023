class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        if 1 in [grid[0][0], grid[-1][-1]]:
            return -1
        
        visited = set((0, 0))
        q = collections.deque([(0, 0, 1)])
        n = len(grid)
        directions = [(0, 1), (1, 0), (-1, 0), (0, -1), (1, 1), (-1, -1), (1, -1), (-1, 1)]
        
        while q:
            x, y, step = q.popleft()
            if (x, y) == (n - 1, n - 1):
                return step
            
            for dx, dy in directions:
                newX = x + dx
                newY = y + dy
                if 0 <= newX < len(grid) and 0 <= newY < len(grid[0]) and grid[newX][newY] == 0 and (newX, newY) not in visited:
                    visited.add((newX, newY))
                    q.append((newX, newY, step + 1))
        
        return -1